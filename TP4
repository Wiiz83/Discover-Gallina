Variable T: Set.
Definition cnat := (T->T) -> (T->T).
Definition c0 : cnat := fun f x => x.
Definition c1 : cnat := fun f x => f x.
Definition c2 : cnat := fun f x => f (f x).

Definition succChurch : cnat -> cnat := fun n => fun f x => (f (n f x)).

Compute succChurch c0.
Compute succChurch c1.
Compute succChurch c2.

(* Definition de la composition de g et f *)
Definition compo : (T->T) -> (T->T) -> (T->T) := fun g f => fun x => g (f x).
(* Un raccourci syntaxique pour ecrire g o f au lieu de (compo g f ) *)
Notation "g 'o' f" := (compo g f) (at level 10).
(* Un iterateur de f, n fois *)
Fixpoint iter (f:T->T) (n: nat) :=
match n with
| O => fun x => x
| S p => f o (iter f p)
end.
(* Utilisation de cet iterateur pour construire un cnat a partir d'un nat standard *)
Definition cnat_of : nat -> cnat := fun n => fun f => (iter f n).

Notation "[ X ] 'N' " := (cnat_of X) (at level 5).

Compute succChurch [5]N.
Compute succChurch [2]N.

Definition addChurch : cnat -> cnat-> cnat := fun n => fun m => fun f x => (n f(m f x)).

Compute addChurch [3]N [4]N.

Definition prodChurch : cnat -> cnat-> cnat := fun n => fun m => fun f => (n (m f)).

Compute prodChurch [3]N [4]N.

Definition cbool := T -> T -> T.

Definition testZero : cnat -> cbool := fun n => fun x y => (n (fun z => y) x).

Compute testZero [1]N.
Compute testZero [0]N.

(* codage de true *)
Definition ctr : cbool := fun x y => x.
(* codage de false *)
Definition cfa : cbool := fun x y => y.

Theorem tz : testZero [1]N = cfa.
Proof.
cbv delta [testZero].
cbv beta.
cbv delta [[1]N].
cbv beta.
cbv delta [cfa].
cbv beta.
reflexivity.
Qed.